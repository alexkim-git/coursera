x
for (i in seq_Len(nrow(x))) {}
for (i in seq_Len(nrow(x))) {for j in seq_len(ncol(x)) {print(x[i,j])}}
for (i in seq_Len(nrow(x))) {for j in seq_len(ncol(x))) {print(x[i,j])}}
for (i in seq_len(nrow(x)) ) {for j in seq_len(ncol(x))) {print(x[i,j])}}
for (i in seq_len(nrow(x)) ) {for (j in seq_len(ncol(x))) {print(x[i,j])}}
library("swirl")
swirl()
bye()
swirl()
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <-names(vect)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
x["bar"]
vect["bar"]
vect[c("foo", "bar")].
vect[c("foo", "bar")]
1:20
c(1:20)
1:20
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
matrix(1:20, nrow = 4, ncol = 5)
my_matrix <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames("patient", "age", "weight", "bp", "rating","test")
cnames <- c("patient", "age", "weight", "bp", "rating","test")
colnames(my_data) <- cnames
my_data
mapply(noise, 1:5, 1:5, 1)
?noise
rnorm(1,0,1)
rnorm(1,0,0)
rnorm(1,1,0)
rnorm(1,,0)
rnorm(1,2,0)
rnorm(1,2,1)
rnorm(1,2,0.01)
rnorm(2,2,0.01)
rnorm(2,2,0.001)
mapply(rnorm, 1:5, 1:5, 1)
mapply(rnorm, 1:5, 1:5, 0.01)
runif(10)
x <- c(rnorm(10,2,0.01), rnorm(10,10, 0.01), rnorm(10, 20, 1))
x
f<- gl(3, 10)
f
tapply(x, f, mean)
x <- c(rnorm(100,2,0.01), rnorm(100,10, 0.01), rnorm(100, 20, 1))
tapply(x, f, mean)
f<- gl(3, 100)
tapply(x, f, mean)
tapply(x, f, range)
x <- c(rnorm(10), runif(10), rnorm(10))
c
x
?gl
gl(2,3,4)
gl(2,3,6)
gl(2,3,7)
gl(2,3,20)
gl(4,3,20)
gl(4,1,20)
gl(4,4,20)
gl(4,,20)
gl(4,0,20)
gl(4,1,20)
gl(21,1,20)
x
c(1)*10
library(datasets)
head(airquality)
datasets
airquality$Month
x <- split(airquality, airquality$Month)
s <- split(airquality, airquality$Month)
s
function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")])
f <- function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")])
f(3)
f
c("Ozone", "Solar.R", "Wind")
airquality(x)
a <- c("Ozone", "Solar.R", "Wind")
airquality(a)
airquality(,a)
s[1]
a
s[1][,a]
s[1,a]
s[1,[,a]]
s[1,]
s[,1]
colMeans(s[1])
s[1]
s[1][,'Ozone']
s[1]$Ozone
s[1][,Ozone]
s[1]%Ozone
s[1]$Ozone
s[1]WindOzone
s[1]Wind
s[1,]
s[[1]]
s[[1]]$Ozone
s[1]
s[2]
s[[1]]
s[[2]]
class(s)
unclass(s)
s[[1]]$a
s[[1]]$c("Ozone", "wind")
s[[1]]$c("Ozone", "Wind")
s[[1]][,"Ozone"]
s[[1]][,a]
colMeans(s[[1]][,a])
lapply(s, function(s) colMeans(x[, c("Ozone", "Solar.E", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.E", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
f <- function (x) {}
f <- function (x) {colMeans(x[, c("Ozone", "Solar.R", "Wind")])}
f(s[[1]])
lapply(s, f)
x <- print("sgasgaga")
x
traceback(c(3,4,))
traceback(c(3,45))
traceback(mean(c(3,45),))
traceback(mean(c(3,45),423))
traceback(mean(c(3,45,42)))
traceback(mean(c(3,45,)))
debug(c())
debug(c(3,4,))
debug(c(3,4))
f
debug(f)
f(aefgaage)
n
data(iris)
?iris
iris$Sepal.Length
mean(iris$Sepal.Length)
iris
iris[1:10]
iris[[1:10]]
sample(iris,100)
?apply
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
mtcars[,1]
mtcars
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)[1]
sapply(split(mtcars$hp, mtcars$cyl), mean)$4
sapply(split(mtcars$hp, mtcars$cyl), mean)[4]
sapply(split(mtcars$hp, mtcars$cyl), mean)[[1]]
x <- sapply(split(mtcars$hp, mtcars$cyl), mean)
x[1]
x[3]
x[3] - x[1]
debug(ls)
ls
n
exit()
z
exit
quit
quit()
library(datasets)
?tapply
iris
x <- iris[,Species = virginica]
x <- iris[Species = virginica]
x <- iris[[,Species = virginica]]
x <- [iris$Species == virginica]
x <- iris$Species == virginica
iris$Species
iris$Species == "virginica"
x <- iris$Species == "virginica"
iris[x]
iris[,x]
iris$Sepal.Length[x]
mean(iris$Sepal.Length[x])
apply(iris[, 1:4], 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x[3] - x[1]
makeVector <- function(x = numeric()) {#
        m <- NULL#
        set <- function(y) {#
                x <<- y#
                m <<- NULL#
        }#
        get <- function() x#
        setmean <- function(mean) m <<- mean#
        getmean <- function() m#
        list(set = set, get = get,#
             setmean = setmean,#
             getmean = getmean)#
}
v <- makeVector(c(1,2,3,4,10,20,30))
v.get()
v
vv$get()
v$get()
v$set(c(20,30,40,50))
v$get()
v$getmean()
v$setmean(mean(v))
v$setmean(mean(v$get()))
v$getmean()
set.seed(1)#
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?rnorm
?set.seed()
?rpois
setwd("/Users/alex_kim/Documents/Github/Coursera/Data_Science/Getting_and_Cleaning_Data/Week_02/")
source("Q1.R")
setwd("/Users/alex_kim/Documents/Github/Coursera/Data_Science/Getting_and_Cleaning_Data/Week_02/")
source("Q1.R")
source("Q1.R")
